meta {
  name: o2p delegate org2person (again)
  type: http
  seq: 12
}

post {
  url: {{baseUrl}}/accessmanagement/api/v1/internal/{{party}}/rights/delegation/offered
  body: json
  auth: none
}

headers {
  Content-Type: application/json
  Accept: application/json
}

body:json {
  {
      "to": [
          {
              "id": "urn:altinn:person:identifier-no",
              "value": "{{toSsn}}"
          },
          {
              "id": "urn:altinn:person:lastname",
              "value": "{{toLastName}}"
          }
      ],
      "rights": [
          {
              "resource": [
                  {
                      "id": "urn:altinn:org",
                      "value": "{{org}}"
                  },
                  {
                      "id": "urn:altinn:app",
                      "value": "{{app}}"
                  }
              ],
              "action": "read"
          }
      ]
  }
}

vars:pre-request {
  toSsn: 
  toLastName: 
  org: ttd
  app: apps-test-prod
  auth_tokenType: Personal
  auth_userId: 
  auth_partyId: 
  auth_ssn: 
  party: 
}

script:pre-request {
  const testdata = require(`./Testdata/rights-delegations/${bru.getEnvVar("tokenEnv")}testdata.json`);
  bru.setVar("auth_userId", testdata.org1.dagl.userid);
  bru.setVar("auth_partyId", testdata.org1.dagl.partyid);
  bru.setVar("auth_ssn", testdata.org1.dagl.pid);
  bru.setVar("party", testdata.org1.partyid);
  bru.setVar("toSsn", testdata.org2.dagl.pid);
  bru.setVar("toLastName", testdata.org2.dagl.lastname);
  
  console.log("auth_userId: " + bru.getVar("auth_userId"));
  console.log("auth_partyId: " + bru.getVar("auth_partyId"));
  console.log("auth_ssn: " + bru.getVar("auth_ssn"));
  console.log("party: " + bru.getVar("party"));
  console.log("toSsn: " + bru.getVar("toSsn"));
  console.log("toLastName: " + bru.getVar("toLastName"));
  
  await tokenGenerator.getToken();
}

tests {
  test("organization to person delegation (again)", function() {
    const data = res.getBody();  
    expect(res.status).to.equal(200);
    expect(data.rightDelegationResults[0]).to.have.property('status', 'Delegated');
  });
  
}
