meta {
  name: tilg successfully delegated app and resource
  type: http
  seq: 40
}

get {
  url: {{baseUrl}}/accessmanagement/api/v1/internal/{{party}}/rights/delegation/received
  body: json
  auth: inherit
}

vars:pre-request {
  auth_tokenType: Personal
  auth_userId: 
  auth_partyId: 
  auth_ssn: 
  party: 
}

script:pre-request {
  const testdata = require(`./Testdata/rights-delegations/${bru.getEnvVar("tokenEnv")}testdata.json`);
  const sharedtestdata = require(`./Testdata/sharedtestdata.json`);
  bru.setVar("party", testdata.randomUser.partyid);
  
  var getTokenParameters = {
    auth_userId: testdata.randomUser.userid,
    auth_partyId: testdata.randomUser.partyid,
    auth_ssn: testdata.randomUser.pid,
    scope: sharedtestdata.scopes.read,
    auth_tokenType: sharedtestdata.authTokenType.personal,
    auth_scopes: sharedtestdata.auth_scopes.read
  }
    const token = await testTokenGenerator.getToken(getTokenParameters);
  
  bru.setVar("bearerToken",  token);
}

tests {
  test("person successfully delegated to a person", function() {
    const testdata = require(`./Testdata/rights-delegations/${bru.getEnvVar("tokenEnv")}testdata.json`);
      const data = res.getBody();
      expect(res.status).to.equal(200);
      expect(data[1].from[0]).to.have.property('id', 'urn:altinn:partyid');
      expect(data[1].from[0]).to.have.property('value', testdata.org3.partyid.toString());
      expect(data[1].to[0]).to.have.property('id', 'urn:altinn:userid');
      expect(data[1].to[0]).to.have.property('value', testdata.randomUser.userid.toString());
      expect(data[1].resource[0]).to.have.property('id', 'urn:altinn:org');
      expect(data[1].resource[0]).to.have.property('value', 'ttd');
      expect(data[1].resource[1]).to.have.property('id', 'urn:altinn:app');
      expect(data[1].resource[1]).to.have.property('value', 'apps-test-tba');
      expect(data[0].from[0]).to.have.property('id', 'urn:altinn:partyid');
      expect(data[0].from[0]).to.have.property('value', testdata.org3.partyid.toString());
      expect(data[0].to[0]).to.have.property('id', 'urn:altinn:userid');
      expect(data[0].to[0]).to.have.property('value', testdata.randomUser.userid.toString());
      expect(data[0].resource[0]).to.have.property('id', 'urn:altinn:resource');
      expect(data[0].resource[0]).to.have.property('value', 'devtest_gar_bruno-gar');
    });
}
