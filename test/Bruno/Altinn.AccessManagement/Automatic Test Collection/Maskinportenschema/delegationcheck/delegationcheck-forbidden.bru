meta {
  name: delegationcheck-forbidden
  type: http
  seq: 4
}

post {
  url: {{baseUrl}}/accessmanagement/api/v1/{{party}}/maskinportenschema/delegationcheck
  body: json
  auth: inherit
}

headers {
  Accept: application/json
}

body:json {
  {
      "resource": [
          {
              "id": "urn:altinn:resource",
              "value": "devtest_gar_bruno-gar"
          }
      ]
  }
}

vars:pre-request {
  scope: altinn:instances.read
  auth_tokenType: Personal
  auth_userId: 
  auth_scopes: altinn:instances.read
  auth_partyId: 
  auth_ssn: 
  party: 50067258
  to_orgno: 
}

assert {
  ~res.status: eq 201
}

script:pre-request {
  const testdata = require(`./Testdata/maskinportenschema/${bru.getEnvVar("tokenEnv")}testdata.json`);
  const sharedtestdata = require(`./Testdata/sharedtestdata.json`);
  bru.setVar("party", testdata.org1.partyid);
  
  var getTokenParameters = {
    auth_userId: testdata.org2.dagl.userid,
    auth_partyId: testdata.org2.dagl.partyid,
    auth_ssn: testdata.org2.dagl.pid,
    party: testdata.org2.partyid,
    scope: sharedtestdata.scopes.read,
    auth_tokenType: sharedtestdata.authTokenType.personal,
    auth_scopes: sharedtestdata.auth_scopes.read
  }
    const token = await testTokenGenerator.getToken(getTokenParameters);
  
  bru.setVar("bearerToken",  token);
}

tests {
  test("post MaskinportenSchema - forbidden", function() {
    const data = res.getBody();
    expect(res.status).to.equal(403);
  });
}

docs {
  does a delegationcheck on as someone who does not have access
}
