meta {
  name: DelegateInstance
  type: http
  seq: 2
}

post {
  url: {{baseUrl}}/accessmanagement/api/v1/apps/instancedelegation/:resourceId/:instanceId
  body: json
  auth: none
}

params:path {
  resourceId: app_{{org}}_{{app}}
  instanceId: {{instanceId}}
}

headers {
  Accept: application/json
  PlatformAccessToken: {{platformAccessToken}}
  Ocp-Apim-Subscription-Key: {{apimSubscriptionKey}}
}

body:json {
  {
    "from": {
      "type": "urn:altinn:party:uuid",
      "value": "ff6fbedd-95ef-4de2-aed3-e6aeb292bd50"
    },
    "to": {
      "type": "urn:altinn:party:uuid",
      "value": "c632a24e-910a-4332-a087-076bc98d600f"
    },
    "instanceDelegationMode": "Normal",
    "rights": [
      {
        "resource": [
          {
            "type": "urn:altinn:org",
            "value": "{{org}}"
          },
          {
            "type": "urn:altinn:app",
            "value": "{{app}}"
          },
          {
            "type": "urn:altinn:task",
            "value": "task_1"
          }
        ],
        "action": {
          "type": "urn:oasis:names:tc:xacml:1.0:action:action-id",
          "value": "read"
        }
      }
    ]
  }
}

script:pre-request {
  const testdata = require(`./Testdata/maskinportenschema/${bru.getEnvVar("tokenEnv")}testdata.json`);
  const sharedtestdata = require(`./Testdata/sharedtestdata.json`);
  const { v4: uuidv4 } = require('uuid');
  
  const org = sharedtestdata.serviceOwners.ttd.org;
  bru.setVar("org",  org);
  const app = "am-devtest-instancedelegation";
  bru.setVar("app",  app);
  
  const uuid = uuidv4();
  bru.setVar("instanceId",  uuid);
  
  var getTokenParameters = {
    auth_org: org,
    auth_app: app,
    auth_tokenType: sharedtestdata.authTokenType.platformAccess
  }
  
  const token = await testTokenGenerator.getToken(getTokenParameters);
  bru.setVar("platformAccessToken",  token);
}

tests {
  test("AppsInstanceDelegation Delegation POST {InsertRequestName}", function() {
    var body = res.getBody();  
    expect(res.status).to.equal(201);
  });
}
