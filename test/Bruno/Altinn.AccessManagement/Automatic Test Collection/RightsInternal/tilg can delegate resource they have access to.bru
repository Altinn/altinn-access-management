meta {
  name: tilg can delegate resource they have access to
  type: http
  seq: 38
}

post {
  url: {{baseUrl}}/accessmanagement/api/v1/internal/{{party}}/rights/delegation/offered
  body: json
  auth: inherit
}

headers {
  Content-Type: application/json
  Accept: application/json
}

body:json {
  {
      "to": [
          {
              "id": "urn:altinn:person:identifier-no",
              "value": "{{toSsn}}"
          },
          {
              "id": "urn:altinn:person:lastname",
              "value": "{{toLastName}}"
          }
      ],
      "rights": [
          {
              "resource": [
                  {
                      "id": "urn:altinn:resource",
                      "value": "devtest_gar_bruno-gar"
                  }
              ],
              "action": "read"
          }
      ]
  }
}

vars:pre-request {
  toSsn: 
  toLastName: 
  org: ttd
  app: apps-test-tba
  auth_tokenType: Personal
  auth_userId: 
  auth_partyId: 
  auth_ssn: 
  party: 
}

script:pre-request {
  const testdata = require(`./Testdata/rights-delegations/${bru.getEnvVar("tokenEnv")}testdata.json`);
  const sharedtestdata = require(`./Testdata/sharedtestdata.json`);
  bru.setVar("party", testdata.org3.partyid);
  bru.setVar("toSsn", testdata.randomUser.pid);
  bru.setVar("toLastName", testdata.randomUser.lastname);
  //bru.setVar("org", testdata.org);
  bru.setVar("app", "apps-test-tba");
  
  var getTokenParameters = {
    auth_userId: testdata.org3.tilg.userid,
    auth_partyId: testdata.org3.tilg.partyid,
    auth_ssn: testdata.org3.tilg.pid,
    auth_tokenType: sharedtestdata.authTokenType.personal,
  }
    const token = await testTokenGenerator.getToken(getTokenParameters);
  
  bru.setVar("bearerToken",  token);
}

tests {
  test("tilgangsstyrer can delegate app they have access to", function() {
    const data = res.getBody();  
    expect(res.status).to.equal(200);
    expect(data.rightDelegationResults[0]).to.have.property('status', 'Delegated');
  });
  
}
