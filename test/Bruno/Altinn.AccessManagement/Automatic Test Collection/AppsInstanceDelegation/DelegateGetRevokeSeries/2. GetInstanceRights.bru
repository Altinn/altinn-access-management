meta {
  name: 2. GetInstanceRights
  type: http
  seq: 2
}

get {
  url: {{baseUrl}}/accessmanagement/api/v1/app/delegations/resource/{{resourceId}}/instance/{{instanceId}}
  body: json
  auth: none
}

headers {
  PlatformAccessToken: {{platformAccessToken}}
}

script:pre-request {
  const sharedtestdata = require(`./Testdata/sharedtestdata.json`);
  const testdata = require(`./Testdata/instance-delegation/${bru.getEnvVar("tokenEnv")}.json`);
  const resource = "app_" + sharedtestdata.serviceOwners.ttd.org + "_" + testdata.app;
  
  bru.setVar("resourceId", resource);
  bru.setVar("instanceId", testdata.instanceid);
  
  var getTokenParameters = {
      auth_org: sharedtestdata.serviceOwners.ttd.org,
      auth_app: testdata.app,
      auth_tokenType: sharedtestdata.authTokenType.platformAccess
    }
  
  const token = await testTokenGenerator.getToken(getTokenParameters);
  bru.setVar("platformAccessToken",  token);
}

tests {
  test("get InstanceDelegation ReadSign", function() {
      const sharedtestdata = require(`./Testdata/sharedtestdata.json`);
      const testdata = require(`./Testdata/instance-delegation/${bru.getEnvVar("tokenEnv")}.json`);
      const resource = "app_" + sharedtestdata.serviceOwners.ttd.org + "_" + testdata.app;
    
      const data = res.getBody();
      expect(res.status).to.equal(200);
      expect(data.data.length).to.equal(1);
    
      expect(data.data[0].resourceId).to.equal(resource);
      expect(data.data[0].instanceId).to.equal(testdata.instanceid);
  
      expect(data.data[0].from.value).to.equal(testdata.org1.partyuuid);
      expect(data.data[0].to.value).to.equal(testdata.person1.partyuuid);
    
      expect(data.data[0].rights.length).to.equal(2);
    
      expect(data.data[0].rights[0].status).to.equal('Delegated');
      expect(data.data[0].rights[0].action.value).to.equal('read');  
      expect(data.data[0].rights[0].resource[0].value).to.equal(resource);
      expect(data.data[0].rights[0].resource[1].value).to.equal('task_1');
      
      expect(data.data[0].rights[1].status).to.equal('Delegated');
      expect(data.data[0].rights[1].action.value).to.equal('sign');  
      expect(data.data[0].rights[1].resource[0].value).to.equal(resource);
      expect(data.data[0].rights[1].resource[1].value).to.equal('task_1');
    });
}
