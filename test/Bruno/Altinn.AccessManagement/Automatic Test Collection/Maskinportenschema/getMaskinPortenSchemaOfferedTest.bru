meta {
  name: getMaskinPortenSchemaOfferedTest
  type: http
  seq: 1
}

get {
  url: {{baseUrl}}/accessmanagement/api/v1/{{party}}/maskinportenschema/offered
  body: none
  auth: inherit
}

headers {
  Accept: application/json
}

vars:pre-request {
  scope: altinn:instances.read
  auth_tokenType: Personal
  auth_userId: 
  auth_scopes: altinn:instances.read
  auth_partyId: 
  auth_ssn: 
  party: 50067258
}

assert {
  ~res.status: eq 200
  ~res.body: contains created
}

script:pre-request {
  const testdata = require(`./Testdata/maskinportenschema/${bru.getEnvVar("tokenEnv")}testdata.json`);
  bru.setVar("auth_userId", testdata.org1.dagl.userid);
  bru.setVar("auth_partyId", testdata.org1.dagl.partyid);
  bru.setVar("auth_ssn", testdata.org1.dagl.pid);
  bru.setVar("party", testdata.org1.partyid);
  
  bru.setVar("bearerToken", await tokenGenerator.getToken("altinn:instances.read"));
}

tests {
  
  test("get MaskinPortenSchema Offered", function() {
    const testdata = require(`./Testdata/maskinportenschema/${bru.getEnvVar("tokenEnv")}testdata.json`);
    const data = res.getBody();  
    expect(res.status).to.equal(200);
    expect(data[0]).to.have.property('offeredByPartyId', testdata.org1.partyid);
    expect(data[0]).to.have.property('offeredByName', 'ALDRA OG FORTUN');
    expect(data[0]).to.have.property('coveredByPartyId', testdata.org2.partyid);
    expect(data[0]).to.have.property('coveredByName', 'LARKOLLEN OG FAUSKE');
    expect(data[0]).to.have.property('coveredByOrganizationNumber', testdata.org2.orgno);
    expect(data[0]).to.have.property('performedByUserId', testdata.org1.dagl.userid);
    expect(data.map(e=>(e.resourceId))).to.include('ttd-am-k6-nuf');
  
  });
}

docs {
  Check that list of offered maschinportenschemas is correct
}
